---
import { checkToken, login } from "@/lib/api"
import "@/styles/globals.css"
import type { AstroCookieSetOptions } from "astro"
import { APIError } from "../../lib/api/types.ts"

// set token and error
let token_: string | null | undefined = null
let _error_: string | null | undefined = null

const jwtCookie = Astro.cookies.get("jwt")
const jwt: string = jwtCookie ? jwtCookie.value : ""

const isTokenValid: boolean = await checkToken(jwt).catch((_error: unknown) => {
	return false
})

if (isTokenValid === true) {
	return Astro.redirect("/")
}

const _email = ""
const _password = ""
if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData()
		const email: string | undefined = data.get("email")?.toString()
		const password: string | undefined = data.get("password")?.toString()
		if (email && password) {
			const loginResponse = await login(email, password).catch(
				(error: unknown) => {
					if (error instanceof APIError) {
						return { token: null, error: error.message }
					}
				},
			)

			token_ = loginResponse?.token
			_error_ = loginResponse?.error

			if (token_) {
				const expiringDate = Date.now() + 60 * 60 * 24 * 1000 // Expiring in 1 day
				const options: AstroCookieSetOptions = {
					expires: new Date(expiringDate),
					sameSite: "strict",
					path: "/",
					domain: "",
					httpOnly: false,
					maxAge: 60 * 60 * 24 * 1000,
					secure: false,
					encode: (s: string) => {
						return s
					},
				}
				Astro.cookies.set("jwt", token_, options)
				return Astro.redirect("/")
			}
		}
	} catch (err: unknown) {
		if (err instanceof Error) {
			console.error(err.message)
		}
	}
}
---

<Layout title={t('login.title')}>
	<main class="place-content-center w-full h-full">
		<GlassMorphism class="max-w-md mx-auto m-10 p-8">
			<h1 class="text-3xl font-bold mb-8 text-center text-dpsg-blue">
				{t('login.title')}
			</h1>
			<form method="POST">
				<div class="mb-6">
					<label
						class="block text-dpsg-blue font-bold mb-2"
						for="email"
					>
						E-Mail:
					</label>
					<Input
						type="email"
						id="email"
						value={email}
						error={error_ !== null}
						required
						name="email"
						classes="bg-transparent rounded-md bg-clip-padding w-full py-3 px-4 text-dpsg-gray-dark leading-tight focus:outline-none focus:shadow-outline border-[0.13rem]"
					/>
				</div>
				<div class="mb-6">
					<label
						class="block text-dpsg-blue font-bold mb-2"
						for="password"
					>
						Passwort:
					</label>
					<Input
						type="password"
						id="password"
						value={password}
						error={error_ !== null}
						required
						name="password"
						classes="bg-transparent rounded-md bg-clip-padding w-full py-3 px-4 text-dpsg-gray-dark leading-tight focus:outline-none focus:shadow-outline border-[0.13rem]"
					/>
				</div>
				<Show when={error_ !== null}>
					<p class="text-dpsg-red text-sm mb-6 max-w-md">{error_}</p>
				</Show>
				<Button
					type="submit"
					classes="bg-dpsg-green hover:bg-dpsg-green-dark text-white font-bold py-3 px-6 rounded-md focus:outline-none focus:shadow-outline transition-colors duration-base ease-in-out"
				>
					{t('login.submit-button')}
				</Button>
			</form>
		</GlassMorphism>
	</main>
</Layout>
