---
import "@/styles/globals.css"
import type { AstroCookieSetOptions } from "astro"
import { login, checkToken, setToken } from '@/lib/api';
import type { LoginRequest } from '@/lib/api/types';
import Layout from '../../layouts/Layout.astro'
import { t } from 'astro-i18n'
import GlassMorphism from '../../components/GlassMorphism.tsx'
import Input from "@/components/Input"
import { Show } from "solid-js"
import Button from "@/components/Button"


async function checkTokenValidity(token: string): Promise<boolean> {
    // Step 1: Login to get the token
    try {
        // Step 2: Set the token
        setToken(token);

        // Step 3: Check if the token is valid
        await checkToken();
        return true;
    } catch (error) {
        return false;
    }
}

// set token and error
let error_: string | null | undefined = null

const jwtCookie = Astro.cookies.get("jwt")
const jwt: string = jwtCookie ? jwtCookie.value : ""

setToken(jwt)

const isTokenValid: boolean = await checkTokenValidity(jwt)

if (isTokenValid === true) {
	return Astro.redirect("/")
}

let password: string | undefined = ""
let email: string | undefined = ""

let loginData: LoginRequest = {
    login_email: email,
    password: password,
}

if (Astro.request.method === "POST") {
	try {
		const data = await Astro.request.formData()
        loginData = { login_email: data.get("email")?.toString(), password: data.get("email")?.toString() || "" }
		if (loginData) {
			await login(loginData).then(response => {
                setToken(response.token);
				const expiringDate = Date.now() + 60 * 60 * 24 * 1000 // Expiring in 1 day
				const options: AstroCookieSetOptions = {
					expires: new Date(expiringDate),
					sameSite: "strict",
					path: "/",
					domain: "",
					httpOnly: false,
					maxAge: 60 * 60 * 24 * 1000,
					secure: false,
					encode: (s: string) => {
						return s
					},
				}
				Astro.cookies.set("jwt", response.token, options)
				return Astro.redirect("/")
            });
        }
	} catch (err: unknown) {
		if (err instanceof Error) {
			console.error(err.message)
		}
	}
}
---

<Layout title={t('login.title')}>
	<main class="place-content-center w-full h-full">
		<GlassMorphism class="max-w-md mx-auto m-10 p-8">
			<h1 class="text-3xl font-bold mb-8 text-center text-dpsg-blue">
				{t('login.title')}
			</h1>
			<form method="POST">
				<div class="mb-6">
					<label
						class="block text-dpsg-blue font-bold mb-2"
						for="email"
					>
						E-Mail:
					</label>
					<Input
						type="email"
						id="email"
						value={email}
						error={error_ !== null}
						required
						name="email"
						classes="bg-transparent rounded-md bg-clip-padding w-full py-3 px-4 text-dpsg-gray-dark leading-tight focus:outline-none focus:shadow-outline border-[0.13rem]"
					/>
				</div>
				<div class="mb-6">
					<label
						class="block text-dpsg-blue font-bold mb-2"
						for="password"
					>
						Passwort:
					</label>
					<Input
						type="password"
						id="password"
						value={password}
						error={error_ !== null}
						required
						name="password"
						classes="bg-transparent rounded-md bg-clip-padding w-full py-3 px-4 text-dpsg-gray-dark leading-tight focus:outline-none focus:shadow-outline border-[0.13rem]"
					/>
				</div>
				<Show when={error_ !== null}>
					<p class="text-dpsg-red text-sm mb-6 max-w-md">{error_}</p>
				</Show>
				<Button
					type="submit"
					classes="bg-dpsg-green hover:bg-dpsg-green-dark text-white font-bold py-3 px-6 rounded-md focus:outline-none focus:shadow-outline transition-colors duration-base ease-in-out"
				>
					{t('login.submit-button')}
				</Button>
			</form>
		</GlassMorphism>
	</main>
</Layout>
