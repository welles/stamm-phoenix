{
  "x-generator": "NSwag v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Stamm Phoenix API",
    "version": "Current"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Meta"
        ],
        "summary": "Show metadata",
        "description": "Produces plain text containing metadata about the running instance of the API.",
        "operationId": "StammPhoenixApiEndpointsMetaGroupRootRootEndpoint",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/is-alive": {
      "get": {
        "tags": [
          "Meta"
        ],
        "summary": "Check status",
        "description": "Returns a simple HTTP response if the API is running.",
        "operationId": "StammPhoenixApiEndpointsMetaGroupIsAliveIsAliveEndpoint",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IsAliveResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "IsAliveResponse": {
        "type": "object",
        "description": "Contains runtime metadata about the API instance.",
        "additionalProperties": false,
        "properties": {
          "status": {
            "type": "string",
            "description": "Contains the current running status of the API."
          },
          "startup_time": {
            "type": "string",
            "description": "The startup time of the API in ISO 8601 format."
          },
          "version": {
            "type": "string",
            "description": "The version of the API."
          }
        }
      }
    },
    "securitySchemes": {
      "JWTBearerAuth": {
        "type": "http",
        "description": "Enter a JWT token to authorize the requests...",
        "scheme": "Bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "Meta",
      "description": "Endpoints concerning metadata about the API"
    },
    {
      "name": "Meta",
      "description": "Endpoints concerning metadata about the API"
    }
  ]
}